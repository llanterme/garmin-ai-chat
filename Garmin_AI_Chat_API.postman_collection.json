{
  "info": {
    "name": "Garmin AI Chat API",
    "description": "Comprehensive test collection for the Garmin AI Chat Backend API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "garmin-ai-chat-api-collection"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Request:', pm.request.name);",
          "console.log('URL:', pm.request.url.toString());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000"
    },
    {
      "key": "access_token",
      "value": ""
    },
    {
      "key": "refresh_token",
      "value": ""
    },
    {
      "key": "user_email",
      "value": "test@example.com"
    },
    {
      "key": "user_password",
      "value": "testpassword123"
    },
    {
      "key": "garmin_username",
      "value": "your_garmin_username"
    },
    {
      "key": "garmin_password",
      "value": "your_garmin_password"
    },
    {
      "key": "activity_id",
      "value": ""
    },
    {
      "key": "sync_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Health & Info",
      "item": [
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          },
          "response": []
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/info",
              "host": ["{{base_url}}"],
              "path": ["api", "info"]
            }
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/",
              "host": ["{{base_url}}"],
              "path": ["health", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('database');",
                  "    pm.expect(responseJson).to.have.property('garmin_service');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/ready",
              "host": ["{{base_url}}"],
              "path": ["health", "ready"]
            }
          },
          "response": []
        },
        {
          "name": "Liveness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/live",
              "host": ["{{base_url}}"],
              "path": ["health", "live"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\",\n  \"full_name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson.email).to.eql(pm.collectionVariables.get('user_email'));",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{user_email}}"
                },
                {
                  "key": "password",
                  "value": "{{user_password}}"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.expect(responseJson).to.have.property('refresh_token');",
                  "    pm.expect(responseJson.token_type).to.eql('bearer');",
                  "",
                  "    // Store tokens for subsequent requests",
                  "    pm.collectionVariables.set('access_token', responseJson.access_token);",
                  "    pm.collectionVariables.set('refresh_token', responseJson.refresh_token);",
                  "});",
                  "",
                  "console.log('Access token saved:', pm.collectionVariables.get('access_token'));"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson.email).to.eql(pm.collectionVariables.get('user_email'));",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has new access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.collectionVariables.set('access_token', responseJson.access_token);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Set Garmin Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{garmin_username}}\",\n  \"password\": \"{{garmin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/garmin-credentials",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "garmin-credentials"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Credentials saved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Test Garmin Connection",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/garmin-test",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "garmin-test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Garmin connection successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"{{user_password}}\",\n  \"new_password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "change-password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Activities",
      "item": [
        {
          "name": "Get Activity Types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/types/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "types", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of activity types', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "List Activities - All",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/?page=1&size=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('items');",
                  "    pm.expect(responseJson).to.have.property('total');",
                  "    pm.expect(responseJson).to.have.property('page');",
                  "    pm.expect(responseJson).to.have.property('size');",
                  "",
                  "    // Store first activity ID if available",
                  "    if (responseJson.items.length > 0) {",
                  "        pm.collectionVariables.set('activity_id', responseJson.items[0].id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "List Activities - Running Only",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/?activity_type=running&page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""],
              "query": [
                {
                  "key": "activity_type",
                  "value": "running"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Activities - Date Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/?start_date=2024-01-01&end_date=2024-12-31",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Activity Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/{{activity_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "{{activity_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Check if we have an activity_id, if not skip this request",
                  "const activityId = pm.collectionVariables.get('activity_id');",
                  "if (!activityId) {",
                  "    console.log('No activity_id available. Run \"List Activities - All\" first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const activityId = pm.collectionVariables.get('activity_id');",
                  "if (activityId) {",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test('Response has activity details', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('id');",
                  "        pm.expect(responseJson).to.have.property('activity_name');",
                  "        pm.expect(responseJson).to.have.property('activity_type');",
                  "    });",
                  "} else {",
                  "    console.log('Skipped - no activity_id available');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Delete Activity",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/{{activity_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "{{activity_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const activityId = pm.collectionVariables.get('activity_id');",
                  "if (!activityId) {",
                  "    console.log('No activity_id available. Run \"List Activities - All\" first.');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Synchronization",
      "item": [
        {
          "name": "Sync Activities - Last 30 Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"days\": 30\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test('Response has sync_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('sync_id');",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "",
                  "    // Store sync_id for monitoring",
                  "    pm.collectionVariables.set('sync_id', responseJson.sync_id);",
                  "});",
                  "",
                  "console.log('Sync ID saved:', pm.collectionVariables.get('sync_id'));"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Sync Activities - Date Range",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"start_date\": \"2024-08-01\",\n  \"end_date\": \"2024-08-31\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.sync_id) {",
                  "    pm.collectionVariables.set('sync_id', responseJson.sync_id);",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Sync Activities - Last 10 Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"days\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "response": []
        },
        {
          "name": "Get Sync Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/status/{{sync_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "status", "{{sync_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const syncId = pm.collectionVariables.get('sync_id');",
                  "if (!syncId) {",
                  "    console.log('No sync_id available. Run a sync request first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const syncId = pm.collectionVariables.get('sync_id');",
                  "if (syncId) {",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test('Response has sync status', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('id');",
                  "        pm.expect(responseJson).to.have.property('status');",
                  "        pm.expect(responseJson).to.have.property('activities_synced');",
                  "    });",
                  "} else {",
                  "    console.log('Skipped - no sync_id available');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Sync History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/history?page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "history"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has sync history structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('items');",
                  "    pm.expect(responseJson).to.have.property('total');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Sync Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has stats data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('total_syncs');",
                  "    pm.expect(responseJson).to.have.property('total_activities');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Unauthorized Request",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Invalid Activity ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/invalid-id-12345",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "invalid-id-12345"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Invalid Sync ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/status/invalid-sync-id",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "status", "invalid-sync-id"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ]
}