{
  "info": {
    "name": "Garmin AI Chat API",
    "description": "Comprehensive test collection for the Garmin AI Chat Backend API with simplified sync+ingestion flow and background task support",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "garmin-ai-chat-api-collection"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Request:', pm.request.name);",
          "console.log('URL:', pm.request.url.toString());"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000"
    },
    {
      "key": "access_token",
      "value": ""
    },
    {
      "key": "refresh_token",
      "value": ""
    },
    {
      "key": "user_email",
      "value": "test@example.com"
    },
    {
      "key": "user_password",
      "value": "testpassword123"
    },
    {
      "key": "garmin_username",
      "value": "your_garmin_username"
    },
    {
      "key": "garmin_password",
      "value": "your_garmin_password"
    },
    {
      "key": "activity_id",
      "value": ""
    },
    {
      "key": "sync_id",
      "value": ""
    },
    {
      "key": "task_id",
      "value": ""
    },
    {
      "key": "conversation_id",
      "value": ""
    },
    {
      "key": "chat_query",
      "value": "What was my longest run last week?"
    }
  ],
  "item": [
    {
      "name": "Health & Info",
      "item": [
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          },
          "response": []
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/info",
              "host": ["{{base_url}}"],
              "path": ["api", "info"]
            }
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/",
              "host": ["{{base_url}}"],
              "path": ["health", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('database');",
                  "    pm.expect(responseJson).to.have.property('garmin_service');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/ready",
              "host": ["{{base_url}}"],
              "path": ["health", "ready"]
            }
          },
          "response": []
        },
        {
          "name": "Liveness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health/live",
              "host": ["{{base_url}}"],
              "path": ["health", "live"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\",\n  \"full_name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson.email).to.eql(pm.collectionVariables.get('user_email'));",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{user_email}}"
                },
                {
                  "key": "password",
                  "value": "{{user_password}}"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.expect(responseJson).to.have.property('refresh_token');",
                  "    pm.expect(responseJson.token_type).to.eql('bearer');",
                  "",
                  "    // Store tokens for subsequent requests",
                  "    pm.collectionVariables.set('access_token', responseJson.access_token);",
                  "    pm.collectionVariables.set('refresh_token', responseJson.refresh_token);",
                  "});",
                  "",
                  "console.log('Access token saved:', pm.collectionVariables.get('access_token'));"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson.email).to.eql(pm.collectionVariables.get('user_email'));",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has new access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('access_token');",
                  "    pm.collectionVariables.set('access_token', responseJson.access_token);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Set Garmin Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{garmin_username}}\",\n  \"password\": \"{{garmin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/garmin-credentials",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "garmin-credentials"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Credentials saved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Test Garmin Connection",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/garmin-test",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "garmin-test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Garmin connection successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"{{user_password}}\",\n  \"new_password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "change-password"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User Data (Background)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me/data",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me", "data"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has task creation data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('task_id');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('status_url');",
                  "",
                  "    // Store task_id for monitoring",
                  "    pm.collectionVariables.set('task_id', responseJson.task_id);",
                  "});",
                  "",
                  "console.log('Deletion task started:', pm.collectionVariables.get('task_id'));"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Background Tasks",
      "item": [
        {
          "name": "Get Task Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tasks", "{{task_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const taskId = pm.collectionVariables.get('task_id');",
                  "if (!taskId) {",
                  "    console.log('No task_id available. Run a background operation first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const taskId = pm.collectionVariables.get('task_id');",
                  "if (taskId) {",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test('Response has task status', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('task_id');",
                  "        pm.expect(responseJson).to.have.property('status');",
                  "        pm.expect(responseJson).to.have.property('progress_percentage');",
                  "        pm.expect(responseJson).to.have.property('progress_message');",
                  "        pm.expect(responseJson).to.have.property('task_type');",
                  "        pm.expect(responseJson).to.have.property('task_name');",
                  "    });",
                  "",
                  "    const responseJson = pm.response.json();",
                  "    console.log('Task Status:', responseJson.status);",
                  "    console.log('Progress:', responseJson.progress_percentage + '%');",
                  "    console.log('Message:', responseJson.progress_message);",
                  "    if (responseJson.result_data) {",
                  "        console.log('Results:', JSON.stringify(responseJson.result_data, null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('Skipped - no task_id available');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get All User Tasks",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tasks/?page=1&page_size=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tasks", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has task list structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('tasks');",
                  "    pm.expect(responseJson).to.have.property('total_count');",
                  "    pm.expect(responseJson).to.have.property('page');",
                  "    pm.expect(responseJson).to.have.property('page_size');",
                  "    pm.expect(responseJson.tasks).to.be.an('array');",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "console.log('Total tasks:', responseJson.total_count);",
                  "console.log('Tasks on this page:', responseJson.tasks.length);"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Tasks by Type - Sync",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tasks/?task_type=sync&page=1&page_size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tasks", ""],
              "query": [
                {
                  "key": "task_type",
                  "value": "sync"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tasks by Type - Ingestion",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tasks/?task_type=ingestion&page=1&page_size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tasks", ""],
              "query": [
                {
                  "key": "task_type",
                  "value": "ingestion"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tasks by Type - Cleanup",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tasks/?task_type=cleanup&page=1&page_size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tasks", ""],
              "query": [
                {
                  "key": "task_type",
                  "value": "cleanup"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Activities",
      "item": [
        {
          "name": "Get Activity Types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/types/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "types", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of activity types', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "List Activities - All",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/?page=1&size=20",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('items');",
                  "    pm.expect(responseJson).to.have.property('total');",
                  "    pm.expect(responseJson).to.have.property('page');",
                  "    pm.expect(responseJson).to.have.property('size');",
                  "",
                  "    // Store first activity ID if available",
                  "    if (responseJson.items.length > 0) {",
                  "        pm.collectionVariables.set('activity_id', responseJson.items[0].id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "List Activities - Running Only",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/?activity_type=running&page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""],
              "query": [
                {
                  "key": "activity_type",
                  "value": "running"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List Activities - Date Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/?start_date=2024-01-01&end_date=2024-12-31",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""],
              "query": [
                {
                  "key": "start_date",
                  "value": "2024-01-01"
                },
                {
                  "key": "end_date",
                  "value": "2024-12-31"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Activity Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/{{activity_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "{{activity_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Check if we have an activity_id, if not skip this request",
                  "const activityId = pm.collectionVariables.get('activity_id');",
                  "if (!activityId) {",
                  "    console.log('No activity_id available. Run \"List Activities - All\" first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const activityId = pm.collectionVariables.get('activity_id');",
                  "if (activityId) {",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test('Response has activity details', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('id');",
                  "        pm.expect(responseJson).to.have.property('activity_name');",
                  "        pm.expect(responseJson).to.have.property('activity_type');",
                  "    });",
                  "} else {",
                  "    console.log('Skipped - no activity_id available');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Delete Activity",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/{{activity_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "{{activity_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const activityId = pm.collectionVariables.get('activity_id');",
                  "if (!activityId) {",
                  "    console.log('No activity_id available. Run \"List Activities - All\" first.');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Synchronization",
      "item": [
        {
          "name": "Sync & Ingest Activities - Last 30 Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"days\": 30,\n  \"force_resync\": false,\n  \"force_reingest\": false,\n  \"batch_size\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test('Response has task creation data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('task_id');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('status_url');",
                  "",
                  "    // Store task_id for monitoring",
                  "    pm.collectionVariables.set('task_id', responseJson.task_id);",
                  "});",
                  "",
                  "console.log('Sync task started:', pm.collectionVariables.get('task_id'));"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Sync & Ingest Activities - Date Range",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"days\": 30,\n  \"force_resync\": false,\n  \"force_reingest\": false,\n  \"batch_size\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.task_id) {",
                  "    pm.collectionVariables.set('task_id', responseJson.task_id);",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Sync & Ingest Activities - Last 10 Days",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"days\": 10,\n  \"force_resync\": false,\n  \"force_reingest\": false,\n  \"batch_size\": 10\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "response": []
        },
        {
          "name": "Force Re-sync & Re-ingest Activities",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"days\\\": 30,\\n  \\\"force_resync\\\": true,\\n  \\\"force_reingest\\\": true,\\n  \\\"batch_size\\\": 5\\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/sync/activities",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "activities"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 202', function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test('Response has task creation data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('task_id');",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('status_url');",
                  "",
                  "    // Store task_id for monitoring",
                  "    pm.collectionVariables.set('task_id', responseJson.task_id);",
                  "});",
                  "",
                  "console.log('Force re-sync and re-ingest task started:', pm.collectionVariables.get('task_id'));"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Sync Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/status/{{sync_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "status", "{{sync_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const syncId = pm.collectionVariables.get('sync_id');",
                  "if (!syncId) {",
                  "    console.log('No sync_id available. Run a sync request first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const syncId = pm.collectionVariables.get('sync_id');",
                  "if (syncId) {",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test('Response has sync status', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('id');",
                  "        pm.expect(responseJson).to.have.property('status');",
                  "        pm.expect(responseJson).to.have.property('activities_synced');",
                  "    });",
                  "} else {",
                  "    console.log('Skipped - no sync_id available');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Sync History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/history?page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "history"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has sync history structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('items');",
                  "    pm.expect(responseJson).to.have.property('total');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Sync Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has stats data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('total_syncs');",
                  "    pm.expect(responseJson).to.have.property('total_activities');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Chat & AI",
      "item": [
        {
          "name": "Chat Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/health",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has service statuses', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('services');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Activity Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "stats"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has vector statistics', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('total_vectors');",
                  "    pm.expect(responseJson).to.have.property('estimated_activities');",
                  "    pm.expect(responseJson).to.have.property('namespace');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Chat Query - Basic",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"{{chat_query}}\",\n  \"search_limit\": 15,\n  \"include_follow_ups\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/chat/query",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "query"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has chat data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('response');",
                  "    pm.expect(responseJson).to.have.property('conversation_id');",
                  "    pm.expect(responseJson).to.have.property('relevant_activities');",
                  "    pm.expect(responseJson).to.have.property('follow_up_questions');",
                  "    pm.expect(responseJson).to.have.property('activity_count');",
                  "",
                  "    // Store conversation ID for follow-up queries",
                  "    if (responseJson.conversation_id) {",
                  "        pm.collectionVariables.set('conversation_id', responseJson.conversation_id);",
                  "    }",
                  "});",
                  "",
                  "console.log('Chat response:', pm.response.json().response);",
                  "console.log('Activities found:', pm.response.json().activity_count);"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Chat Query - Temporal",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"What did I do yesterday?\",\n  \"conversation_id\": \"{{conversation_id}}\",\n  \"search_limit\": 10,\n  \"include_follow_ups\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/chat/query",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "query"]
            }
          },
          "response": []
        },
        {
          "name": "Chat Query - Performance Analysis",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"How's my running pace improving this month?\",\n  \"conversation_id\": \"{{conversation_id}}\",\n  \"search_limit\": 25,\n  \"include_follow_ups\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/chat/query",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "query"]
            }
          },
          "response": []
        },
        {
          "name": "Chat Query - Aggregation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"How many calories did I burn this week?\",\n  \"conversation_id\": \"{{conversation_id}}\",\n  \"search_limit\": 50,\n  \"include_follow_ups\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/chat/query",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "query"]
            }
          },
          "response": []
        },
        {
          "name": "Chat Query - Activity Comparison",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Compare my cycling power output this month vs last month\",\n  \"search_limit\": 100,\n  \"include_follow_ups\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/chat/query",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "query"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/conversations",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "conversations"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has conversations list', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('conversations');",
                  "    pm.expect(responseJson).to.have.property('total_count');",
                  "    pm.expect(responseJson.conversations).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Conversation History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/conversations/{{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "conversations", "{{conversation_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const conversationId = pm.collectionVariables.get('conversation_id');",
                  "if (!conversationId) {",
                  "    console.log('No conversation_id available. Run a chat query first.');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const conversationId = pm.collectionVariables.get('conversation_id');",
                  "if (conversationId) {",
                  "    pm.test('Status code is 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test('Response has conversation history', function () {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson).to.have.property('conversation_id');",
                  "        pm.expect(responseJson).to.have.property('messages');",
                  "        pm.expect(responseJson).to.have.property('message_count');",
                  "        pm.expect(responseJson.messages).to.be.an('array');",
                  "    });",
                  "} else {",
                  "    console.log('Skipped - no conversation_id available');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Clear Conversation",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/conversations/{{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "conversations", "{{conversation_id}}"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const conversationId = pm.collectionVariables.get('conversation_id');",
                  "if (!conversationId) {",
                  "    console.log('No conversation_id available. Run a chat query first.');",
                  "}"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Chat Suggestions - General",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/suggestions",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "suggestions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has suggestions', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('suggestions');",
                  "    pm.expect(responseJson).to.have.property('category');",
                  "    pm.expect(responseJson.suggestions).to.be.an('array');",
                  "    pm.expect(responseJson.suggestions.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Chat Suggestions - Running",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/suggestions?activity_type=running&recent_query=pace",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "suggestions"],
              "query": [
                {
                  "key": "activity_type",
                  "value": "running"
                },
                {
                  "key": "recent_query",
                  "value": "pace"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Chat Suggestions - Cycling",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/chat/suggestions?activity_type=cycling",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "chat", "suggestions"],
              "query": [
                {
                  "key": "activity_type",
                  "value": "cycling"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Unauthorized Request",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Invalid Activity ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/activities/invalid-id-12345",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "activities", "invalid-id-12345"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Invalid Sync ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/sync/status/invalid-sync-id",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "sync", "status", "invalid-sync-id"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "response": []
        },
        {
          "name": "Invalid Task ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/tasks/invalid-task-id",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tasks", "invalid-task-id"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('detail');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ]
}